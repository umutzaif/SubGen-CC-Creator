import sys
from pathlib import Path
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton, QLabel,
    QFileDialog, QComboBox, QMessageBox, QCheckBox
)

# SubGen modÃ¼lleri
from subgen.audio import extract_audio
from subgen.asr import transcribe_audio
from subgen.translate import translate_segments
from subgen.exporter import save_srt, save_txt


class SubGenApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ðŸŽ¬ SubGen - AltyazÄ± OluÅŸturucu")
        self.setGeometry(200, 200, 400, 250)

        layout = QVBoxLayout()

        # KullanÄ±cÄ±ya dosya seÃ§me uyarÄ±sÄ±
        self.label = QLabel("Bir MP4 veya MP3 dosyasÄ± seÃ§in")
        layout.addWidget(self.label)

        # Dosya seÃ§me butonu
        self.btn_select = QPushButton("ðŸŽµ Dosya SeÃ§")
        self.btn_select.clicked.connect(self.select_file)
        layout.addWidget(self.btn_select)

        # Model seÃ§imi
        self.model_box = QComboBox()
        self.model_box.addItems(["tiny", "base", "small", "medium", "large-v3"])
        layout.addWidget(QLabel("Model SeÃ§"))
        layout.addWidget(self.model_box)

        # Orijinal dil seÃ§imi
        self.lang_box = QComboBox()
        self.lang_box.addItems(["auto", "tr", "en", "de", "fr", "es"])
        layout.addWidget(QLabel("Orijinal Dil"))
        layout.addWidget(self.lang_box)

        # Ã‡eviri hedef dili
        self.target_box = QComboBox()
        self.target_box.addItems(["", "tr", "en", "de", "fr", "es"])
        layout.addWidget(QLabel("Hedef Dil (opsiyonel)"))
        layout.addWidget(self.target_box)

        # Ã‡Ä±ktÄ± formatlarÄ±
        self.chk_srt = QCheckBox("SRT kaydet")
        self.chk_srt.setChecked(True)
        layout.addWidget(self.chk_srt)

        self.chk_txt = QCheckBox("TXT kaydet")
        layout.addWidget(self.chk_txt)

        # Ã‡alÄ±ÅŸtÄ±rma butonu
        self.btn_run = QPushButton("ðŸš€ AltyazÄ± OluÅŸtur")
        self.btn_run.clicked.connect(self.run_subgen)
        layout.addWidget(self.btn_run)

        self.setLayout(layout)
        self.input_file = None

    def select_file(self):
        """Dosya seÃ§me dialogu"""
        file, _ = QFileDialog.getOpenFileName(
            self, "Dosya SeÃ§", "", "Video/Audio (*.mp4 *.mp3)"
        )
        if file:
            self.input_file = Path(file)
            self.label.setText(f"SeÃ§ilen dosya: {self.input_file.name}")

    def run_subgen(self):
        """AltyazÄ± oluÅŸturma iÅŸlemi"""
        if not self.input_file:
            QMessageBox.warning(self, "Hata", "LÃ¼tfen bir dosya seÃ§in!")
            return

        out_dir = Path("outputs")
        out_dir.mkdir(exist_ok=True)

        # 1. Ses Ã§Ä±karma
        wav_file = extract_audio(str(self.input_file), out_dir)

        # 2. Transkripsiyon
        segments = transcribe_audio(
            str(wav_file),
            self.model_box.currentText(),
            self.lang_box.currentText()
        )

        # 3. Opsiyonel Ã§eviri
        if self.target_box.currentText():
            segments = translate_segments(segments, self.target_box.currentText())

        # 4. Kaydetme
        if self.chk_srt.isChecked():
            save_srt(segments, out_dir / f"{self.input_file.stem}.srt")
        if self.chk_txt.isChecked():
            save_txt(segments, out_dir / f"{self.input_file.stem}.txt")

        QMessageBox.information(self, "TamamlandÄ±", f"AltyazÄ±lar {out_dir} klasÃ¶rÃ¼ne kaydedildi âœ…")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = SubGenApp()
    window.show()
    sys.exit(app.exec_())
